import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar
import com.vanniktech.maven.publish.SonatypeHost

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(libs.android.gradle)
        classpath(libs.android.maven.gradle.plugin)
        classpath(libs.spotless.gradle.plugin)
    }
}

plugins {
    id 'idea'
    id 'eclipse'
    id 'java'
    alias(libs.plugins.spotless)
    alias(libs.plugins.mavenPublish)
}

group = 'com.configcat'
version = '1.1.1'

repositories {
    mavenCentral()
}

sourceSets {
    main.java.srcDirs = ['src/main/java']
}

if(hasProperty('target') && target == 'android') {

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android {
        compileSdkVersion 25
        buildToolsVersion '25.0.2'
        defaultConfig {
            minSdkVersion 14
            targetSdkVersion 25
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        // Rename the aar correctly
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

        dependencies {
            provided(libs.jakarta.annotation.api)
        }
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
            task.description = "Create jar artifact for ${variant.name}"
            task.dependsOn variant.javaCompile
            task.from variant.javaCompile.destinationDirectory
            task.destinationDirectory = project.file("${project.buildDir}/outputs/jar")
            task.archiveFileName = "${project.name}-${variant.baseName}-${version}.jar"
            artifacts.add('archives', task)
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    artifacts {
        archives sourcesJar
    }

}

dependencies {
    implementation(libs.swagger.annotations)
    implementation(libs.findbugs.jsr305)
    implementation(libs.okhttp)
    implementation(libs.logging.interceptor)
    implementation(libs.gson)
    implementation(libs.gson.fire)
    implementation(libs.jsr311.api)
    implementation(libs.javax.ws.rs.api)
    implementation(libs.jackson.databind.nullable)
    implementation(libs.jackson.core)
    implementation(libs.commons.lang3)
    implementation(libs.jakarta.annotation.api)
    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.mockito.core)
    testRuntimeOnly(libs.junit.jupiter.engine)
}

javadoc {
    failOnError = false
    options.tags = [ "http.response.details:a:Http Response Details" ]
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false

    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java

        // apply a specific flavor of google-java-format
        googleJavaFormat('1.8').aosp().reflowLongStrings()

        removeUnusedImports()
        importOrder()
    }
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

    def signingInMemoryKey = findProperty("ORG_GRADLE_PROJECT_signingInMemoryKey")
    def signingInMemoryKeyPassword = findProperty("ORG_GRADLE_PROJECT_signingInMemoryKeyPassword")
    if (signingInMemoryKey && signingInMemoryKeyPassword) {
        signAllPublications()
    }

    configure(new JavaLibrary(new JavadocJar.Javadoc(), true))

    coordinates(project.group as String, project.name, project.version as String)

    pom {
        name.set("ConfigCat PublicApi Java Client")
        description.set("ConfigCat PublicApi Java Client generated with OpenAPI Generator.")
        url.set("https://github.com/configcat/configcat-publicapi-java-client")
        licenses {
            license {
                name.set("MIT License")
                url.set("https://raw.githubusercontent.com/configcat/configcat-publicapi-java-client/main/LICENSE")
                distribution.set("repo")
            }
        }
        scm {
            connection.set("scm:git:git://github.com/configcat/configcat-publicapi-java-client.git")
            developerConnection.set("scm:git:ssh:git@github.com:configcat/configcat-publicapi-java-client.git")
            url.set("https://github.com/configcat/configcat-publicapi-java-client")
        }
        developers {
            developer {
                id.set("configcat")
                name.set("ConfigCat")
                email.set("developer@configcat.com")
            }
        }
        organization {
            url.set("https://configcat.com")
            name.set("ConfigCat")
        }
    }
}

