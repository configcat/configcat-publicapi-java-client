/*
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.configcat.publicapi.java.client.api;

import com.configcat.publicapi.java.client.ApiException;
import com.configcat.publicapi.java.client.model.JsonPatchOperation;
import java.util.UUID;
import com.configcat.publicapi.java.client.model.WebHookRequest;
import com.configcat.publicapi.java.client.model.WebhookModel;
import com.configcat.publicapi.java.client.model.WebhookSigningKeysModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    /**
     * Create Webhook
     *
     * This endpoint creates a new Webhook in a specified Product identified by the &#x60;productId&#x60; parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookTest() throws ApiException {
        UUID configId = null;
        UUID environmentId = null;
        WebHookRequest webHookRequest = null;
        WebhookModel response = api.createWebhook(configId, environmentId, webHookRequest);
        // TODO: test validations
    }

    /**
     * Delete Webhook
     *
     * This endpoint removes a Webhook identified by the &#x60;webhookId&#x60; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        Integer webhookId = null;
        api.deleteWebhook(webhookId);
        // TODO: test validations
    }

    /**
     * Get Webhook
     *
     * This endpoint returns the metadata of a Webhook  identified by the &#x60;webhookId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        Integer webhookId = null;
        WebhookModel response = api.getWebhook(webhookId);
        // TODO: test validations
    }

    /**
     * Get Webhook Signing Keys
     *
     * This endpoint returns the signing keys of a Webhook  identified by the &#x60;webhookId&#x60;.  Signing keys are used for ensuring the Webhook requests you receive are actually sent by ConfigCat.  &lt;a href&#x3D;\&quot;https://configcat.com/docs/advanced/notifications-webhooks/#verifying-webhook-requests\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Here&lt;/a&gt; you can read more about Webhook request verification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookSigningKeysTest() throws ApiException {
        Integer webhookId = null;
        WebhookSigningKeysModel response = api.getWebhookSigningKeys(webhookId);
        // TODO: test validations
    }

    /**
     * List Webhooks
     *
     * This endpoint returns the list of the Webhooks that belongs to the given Product identified by the &#x60;productId&#x60; parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhooksTest() throws ApiException {
        UUID productId = null;
        List<WebhookModel> response = api.getWebhooks(productId);
        // TODO: test validations
    }

    /**
     * Replace Webhook
     *
     * This endpoint replaces the whole value of a Webhook identified by the &#x60;webhookId&#x60; parameter.  **Important:** As this endpoint is doing a complete replace, it&#39;s important to set every other attribute that you don&#39;t want to change in its original state. Not listing one means it will reset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceWebhookTest() throws ApiException {
        Integer webhookId = null;
        WebHookRequest webHookRequest = null;
        WebhookModel response = api.replaceWebhook(webhookId, webHookRequest);
        // TODO: test validations
    }

    /**
     * Update Webhook
     *
     * This endpoint updates a Webhook identified by the &#x60;webhookId&#x60; parameter with a collection of [JSON Patch](https://jsonpatch.com) operations.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don&#39;t want to change.  For example: We have the following resource. &#x60;&#x60;&#x60;json {   \&quot;webhookId\&quot;: 6,   \&quot;url\&quot;: \&quot;https://example.com/hook\&quot;,   \&quot;httpMethod\&quot;: \&quot;post\&quot;,   \&quot;content\&quot;: \&quot;null\&quot;,   \&quot;webHookHeaders\&quot;: [] } &#x60;&#x60;&#x60; If we send an update request body as below (it changes the &#x60;content&#x60; field and adds a new HTTP header): &#x60;&#x60;&#x60;json [   {     \&quot;op\&quot;: \&quot;replace\&quot;,      \&quot;path\&quot;: \&quot;/content\&quot;,      \&quot;value\&quot;: \&quot;Some webhook content.\&quot;   },    {     \&quot;op\&quot;: \&quot;add\&quot;,      \&quot;path\&quot;: \&quot;/webHookHeaders/-\&quot;,      \&quot;value\&quot;: {       \&quot;key\&quot;: \&quot;X-Custom-Header\&quot;,        \&quot;value\&quot;: \&quot;Custom header value\&quot;     }   } ] &#x60;&#x60;&#x60; Only the &#x60;content&#x60; and &#x60;webHookHeaders&#x60; are updated and all the other attributes remain unchanged. So we get a response like this: &#x60;&#x60;&#x60;json {   \&quot;webhookId\&quot;: 6,   \&quot;url\&quot;: \&quot;https://example.com/hook\&quot;,   \&quot;httpMethod\&quot;: \&quot;post\&quot;,    \&quot;content\&quot;: \&quot;Some webhook content.\&quot;,    \&quot;webHookHeaders\&quot;: [     {       \&quot;key\&quot;: \&quot;X-Custom-Header\&quot;,        \&quot;value\&quot;: \&quot;Custom header value\&quot;,        \&quot;isSecure\&quot;: false     }   ] } &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookTest() throws ApiException {
        Integer webhookId = null;
        List<JsonPatchOperation> jsonPatchOperation = null;
        WebhookModel response = api.updateWebhook(webhookId, jsonPatchOperation);
        // TODO: test validations
    }

}
