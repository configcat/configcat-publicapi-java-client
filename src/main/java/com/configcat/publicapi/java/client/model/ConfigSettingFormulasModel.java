/*
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.configcat.publicapi.java.client.model;

import java.util.Objects;
import com.configcat.publicapi.java.client.model.ConfigModel;
import com.configcat.publicapi.java.client.model.ConfigSettingFormulaModel;
import com.configcat.publicapi.java.client.model.EnvironmentModel;
import com.configcat.publicapi.java.client.model.FeatureFlagLimitations;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.configcat.publicapi.java.client.JSON;

/**
 * ConfigSettingFormulasModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-10T21:25:35.532049258Z[Etc/UTC]", comments = "Generator version: 7.7.0")
public class ConfigSettingFormulasModel {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private ConfigModel config;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private EnvironmentModel environment;

  public static final String SERIALIZED_NAME_READ_ONLY = "readOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_SETTING_FORMULAS = "settingFormulas";
  @SerializedName(SERIALIZED_NAME_SETTING_FORMULAS)
  private List<ConfigSettingFormulaModel> settingFormulas = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEATURE_FLAG_LIMITATIONS = "featureFlagLimitations";
  @SerializedName(SERIALIZED_NAME_FEATURE_FLAG_LIMITATIONS)
  private FeatureFlagLimitations featureFlagLimitations;

  public ConfigSettingFormulasModel() {
  }

  public ConfigSettingFormulasModel config(ConfigModel config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nonnull
  public ConfigModel getConfig() {
    return config;
  }

  public void setConfig(ConfigModel config) {
    this.config = config;
  }


  public ConfigSettingFormulasModel environment(EnvironmentModel environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nonnull
  public EnvironmentModel getEnvironment() {
    return environment;
  }

  public void setEnvironment(EnvironmentModel environment) {
    this.environment = environment;
  }


  public ConfigSettingFormulasModel readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Get readOnly
   * @return readOnly
   */
  @javax.annotation.Nonnull
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public ConfigSettingFormulasModel settingFormulas(List<ConfigSettingFormulaModel> settingFormulas) {
    this.settingFormulas = settingFormulas;
    return this;
  }

  public ConfigSettingFormulasModel addSettingFormulasItem(ConfigSettingFormulaModel settingFormulasItem) {
    if (this.settingFormulas == null) {
      this.settingFormulas = new ArrayList<>();
    }
    this.settingFormulas.add(settingFormulasItem);
    return this;
  }

  /**
   * Evaluation descriptors of each updated Feature Flag and Setting.
   * @return settingFormulas
   */
  @javax.annotation.Nonnull
  public List<ConfigSettingFormulaModel> getSettingFormulas() {
    return settingFormulas;
  }

  public void setSettingFormulas(List<ConfigSettingFormulaModel> settingFormulas) {
    this.settingFormulas = settingFormulas;
  }


  public ConfigSettingFormulasModel featureFlagLimitations(FeatureFlagLimitations featureFlagLimitations) {
    this.featureFlagLimitations = featureFlagLimitations;
    return this;
  }

  /**
   * Get featureFlagLimitations
   * @return featureFlagLimitations
   */
  @javax.annotation.Nonnull
  public FeatureFlagLimitations getFeatureFlagLimitations() {
    return featureFlagLimitations;
  }

  public void setFeatureFlagLimitations(FeatureFlagLimitations featureFlagLimitations) {
    this.featureFlagLimitations = featureFlagLimitations;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConfigSettingFormulasModel instance itself
   */
  public ConfigSettingFormulasModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigSettingFormulasModel configSettingFormulasModel = (ConfigSettingFormulasModel) o;
    return Objects.equals(this.config, configSettingFormulasModel.config) &&
        Objects.equals(this.environment, configSettingFormulasModel.environment) &&
        Objects.equals(this.readOnly, configSettingFormulasModel.readOnly) &&
        Objects.equals(this.settingFormulas, configSettingFormulasModel.settingFormulas) &&
        Objects.equals(this.featureFlagLimitations, configSettingFormulasModel.featureFlagLimitations)&&
        Objects.equals(this.additionalProperties, configSettingFormulasModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, environment, readOnly, settingFormulas, featureFlagLimitations, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigSettingFormulasModel {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    settingFormulas: ").append(toIndentedString(settingFormulas)).append("\n");
    sb.append("    featureFlagLimitations: ").append(toIndentedString(featureFlagLimitations)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("environment");
    openapiFields.add("readOnly");
    openapiFields.add("settingFormulas");
    openapiFields.add("featureFlagLimitations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("config");
    openapiRequiredFields.add("environment");
    openapiRequiredFields.add("readOnly");
    openapiRequiredFields.add("settingFormulas");
    openapiRequiredFields.add("featureFlagLimitations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigSettingFormulasModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigSettingFormulasModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigSettingFormulasModel is not found in the empty JSON string", ConfigSettingFormulasModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigSettingFormulasModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `config`
      ConfigModel.validateJsonElement(jsonObj.get("config"));
      // validate the required field `environment`
      EnvironmentModel.validateJsonElement(jsonObj.get("environment"));
      // ensure the json data is an array
      if (!jsonObj.get("settingFormulas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `settingFormulas` to be an array in the JSON string but got `%s`", jsonObj.get("settingFormulas").toString()));
      }

      JsonArray jsonArraysettingFormulas = jsonObj.getAsJsonArray("settingFormulas");
      // validate the required field `settingFormulas` (array)
      for (int i = 0; i < jsonArraysettingFormulas.size(); i++) {
        ConfigSettingFormulaModel.validateJsonElement(jsonArraysettingFormulas.get(i));
      };
      // validate the required field `featureFlagLimitations`
      FeatureFlagLimitations.validateJsonElement(jsonObj.get("featureFlagLimitations"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigSettingFormulasModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigSettingFormulasModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigSettingFormulasModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigSettingFormulasModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigSettingFormulasModel>() {
           @Override
           public void write(JsonWriter out, ConfigSettingFormulasModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigSettingFormulasModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ConfigSettingFormulasModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigSettingFormulasModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigSettingFormulasModel
   * @throws IOException if the JSON string is invalid with respect to ConfigSettingFormulasModel
   */
  public static ConfigSettingFormulasModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigSettingFormulasModel.class);
  }

  /**
   * Convert an instance of ConfigSettingFormulasModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

