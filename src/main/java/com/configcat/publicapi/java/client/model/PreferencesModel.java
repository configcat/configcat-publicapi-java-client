/*
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.configcat.publicapi.java.client.model;


import com.configcat.publicapi.java.client.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** PreferencesModel */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-10-09T12:38:06.739118192Z[Etc/UTC]",
        comments = "Generator version: 7.7.0")
public class PreferencesModel {
    public static final String SERIALIZED_NAME_REASON_REQUIRED = "reasonRequired";

    @SerializedName(SERIALIZED_NAME_REASON_REQUIRED)
    private Boolean reasonRequired;

    public static final String SERIALIZED_NAME_KEY_GENERATION_MODE = "keyGenerationMode";

    @SerializedName(SERIALIZED_NAME_KEY_GENERATION_MODE)
    private KeyGenerationMode keyGenerationMode;

    public static final String SERIALIZED_NAME_SHOW_VARIATION_ID = "showVariationId";

    @SerializedName(SERIALIZED_NAME_SHOW_VARIATION_ID)
    private Boolean showVariationId;

    public static final String SERIALIZED_NAME_REASON_REQUIRED_ENVIRONMENTS =
            "reasonRequiredEnvironments";

    @SerializedName(SERIALIZED_NAME_REASON_REQUIRED_ENVIRONMENTS)
    private List<ReasonRequiredEnvironmentModel> reasonRequiredEnvironments;

    public static final String SERIALIZED_NAME_MANDATORY_SETTING_HINT = "mandatorySettingHint";

    @SerializedName(SERIALIZED_NAME_MANDATORY_SETTING_HINT)
    private Boolean mandatorySettingHint;

    public PreferencesModel() {}

    public PreferencesModel reasonRequired(Boolean reasonRequired) {
        this.reasonRequired = reasonRequired;
        return this;
    }

    /**
     * Indicates that a mandatory note required for saving and publishing.
     *
     * @return reasonRequired
     */
    @javax.annotation.Nullable
    public Boolean getReasonRequired() {
        return reasonRequired;
    }

    public void setReasonRequired(Boolean reasonRequired) {
        this.reasonRequired = reasonRequired;
    }

    public PreferencesModel keyGenerationMode(KeyGenerationMode keyGenerationMode) {
        this.keyGenerationMode = keyGenerationMode;
        return this;
    }

    /**
     * Get keyGenerationMode
     *
     * @return keyGenerationMode
     */
    @javax.annotation.Nullable
    public KeyGenerationMode getKeyGenerationMode() {
        return keyGenerationMode;
    }

    public void setKeyGenerationMode(KeyGenerationMode keyGenerationMode) {
        this.keyGenerationMode = keyGenerationMode;
    }

    public PreferencesModel showVariationId(Boolean showVariationId) {
        this.showVariationId = showVariationId;
        return this;
    }

    /**
     * Indicates whether a variation ID&#39;s must be shown on the ConfigCat Dashboard.
     *
     * @return showVariationId
     */
    @javax.annotation.Nullable
    public Boolean getShowVariationId() {
        return showVariationId;
    }

    public void setShowVariationId(Boolean showVariationId) {
        this.showVariationId = showVariationId;
    }

    public PreferencesModel reasonRequiredEnvironments(
            List<ReasonRequiredEnvironmentModel> reasonRequiredEnvironments) {
        this.reasonRequiredEnvironments = reasonRequiredEnvironments;
        return this;
    }

    public PreferencesModel addReasonRequiredEnvironmentsItem(
            ReasonRequiredEnvironmentModel reasonRequiredEnvironmentsItem) {
        if (this.reasonRequiredEnvironments == null) {
            this.reasonRequiredEnvironments = new ArrayList<>();
        }
        this.reasonRequiredEnvironments.add(reasonRequiredEnvironmentsItem);
        return this;
    }

    /**
     * List of Environments where mandatory note must be set before saving and publishing.
     *
     * @return reasonRequiredEnvironments
     */
    @javax.annotation.Nullable
    public List<ReasonRequiredEnvironmentModel> getReasonRequiredEnvironments() {
        return reasonRequiredEnvironments;
    }

    public void setReasonRequiredEnvironments(
            List<ReasonRequiredEnvironmentModel> reasonRequiredEnvironments) {
        this.reasonRequiredEnvironments = reasonRequiredEnvironments;
    }

    public PreferencesModel mandatorySettingHint(Boolean mandatorySettingHint) {
        this.mandatorySettingHint = mandatorySettingHint;
        return this;
    }

    /**
     * Indicates whether Feature flags and Settings must have a hint.
     *
     * @return mandatorySettingHint
     */
    @javax.annotation.Nullable
    public Boolean getMandatorySettingHint() {
        return mandatorySettingHint;
    }

    public void setMandatorySettingHint(Boolean mandatorySettingHint) {
        this.mandatorySettingHint = mandatorySettingHint;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PreferencesModel preferencesModel = (PreferencesModel) o;
        return Objects.equals(this.reasonRequired, preferencesModel.reasonRequired)
                && Objects.equals(this.keyGenerationMode, preferencesModel.keyGenerationMode)
                && Objects.equals(this.showVariationId, preferencesModel.showVariationId)
                && Objects.equals(
                        this.reasonRequiredEnvironments,
                        preferencesModel.reasonRequiredEnvironments)
                && Objects.equals(this.mandatorySettingHint, preferencesModel.mandatorySettingHint);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                reasonRequired,
                keyGenerationMode,
                showVariationId,
                reasonRequiredEnvironments,
                mandatorySettingHint);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PreferencesModel {\n");
        sb.append("    reasonRequired: ").append(toIndentedString(reasonRequired)).append("\n");
        sb.append("    keyGenerationMode: ")
                .append(toIndentedString(keyGenerationMode))
                .append("\n");
        sb.append("    showVariationId: ").append(toIndentedString(showVariationId)).append("\n");
        sb.append("    reasonRequiredEnvironments: ")
                .append(toIndentedString(reasonRequiredEnvironments))
                .append("\n");
        sb.append("    mandatorySettingHint: ")
                .append(toIndentedString(mandatorySettingHint))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("reasonRequired");
        openapiFields.add("keyGenerationMode");
        openapiFields.add("showVariationId");
        openapiFields.add("reasonRequiredEnvironments");
        openapiFields.add("mandatorySettingHint");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PreferencesModel
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!PreferencesModel.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PreferencesModel is not found in the"
                                        + " empty JSON string",
                                PreferencesModel.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!PreferencesModel.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PreferencesModel` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `keyGenerationMode`
        if (jsonObj.get("keyGenerationMode") != null
                && !jsonObj.get("keyGenerationMode").isJsonNull()) {
            KeyGenerationMode.validateJsonElement(jsonObj.get("keyGenerationMode"));
        }
        if (jsonObj.get("reasonRequiredEnvironments") != null
                && !jsonObj.get("reasonRequiredEnvironments").isJsonNull()) {
            JsonArray jsonArrayreasonRequiredEnvironments =
                    jsonObj.getAsJsonArray("reasonRequiredEnvironments");
            if (jsonArrayreasonRequiredEnvironments != null) {
                // ensure the json data is an array
                if (!jsonObj.get("reasonRequiredEnvironments").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `reasonRequiredEnvironments` to be an"
                                            + " array in the JSON string but got `%s`",
                                    jsonObj.get("reasonRequiredEnvironments").toString()));
                }

                // validate the optional field `reasonRequiredEnvironments` (array)
                for (int i = 0; i < jsonArrayreasonRequiredEnvironments.size(); i++) {
                    ReasonRequiredEnvironmentModel.validateJsonElement(
                            jsonArrayreasonRequiredEnvironments.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PreferencesModel.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PreferencesModel' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PreferencesModel> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PreferencesModel.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PreferencesModel>() {
                        @Override
                        public void write(JsonWriter out, PreferencesModel value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PreferencesModel read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PreferencesModel given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PreferencesModel
     * @throws IOException if the JSON string is invalid with respect to PreferencesModel
     */
    public static PreferencesModel fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PreferencesModel.class);
    }

    /**
     * Convert an instance of PreferencesModel to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
