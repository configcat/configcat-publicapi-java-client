/*
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.configcat.publicapi.java.client.api;

import com.configcat.publicapi.java.client.ApiCallback;
import com.configcat.publicapi.java.client.ApiClient;
import com.configcat.publicapi.java.client.ApiException;
import com.configcat.publicapi.java.client.ApiResponse;
import com.configcat.publicapi.java.client.Configuration;
import com.configcat.publicapi.java.client.Pair;
import com.configcat.publicapi.java.client.ProgressRequestBody;
import com.configcat.publicapi.java.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.configcat.publicapi.java.client.model.StaleFlagProductModel;
import com.configcat.publicapi.java.client.model.StaleFlagReminderScope;
import com.configcat.publicapi.java.client.model.StaleFlagStaleInEnvironmentsType;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZombieStaleFlagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZombieStaleFlagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZombieStaleFlagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getStaleflags
     * @param productId The identifier of the Product. (required)
     * @param scope The scope of the report. (optional)
     * @param staleFlagAgeDays The inactivity in days after a feature flag should be considered stale. (optional)
     * @param staleFlagStaleInEnvironmentsType Consider a feature flag as stale if the feature flag is stale in all/any of the environments. (optional)
     * @param ignoredEnvironmentIds Ignore environment identifiers from the report. (optional)
     * @param ignoredTagIds Ignore feature flags from the report based on their tag identifiers. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStaleflagsCall(UUID productId, StaleFlagReminderScope scope, Integer staleFlagAgeDays, StaleFlagStaleInEnvironmentsType staleFlagStaleInEnvironmentsType, List<UUID> ignoredEnvironmentIds, List<Long> ignoredTagIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/products/{productId}/staleflags"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (staleFlagAgeDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staleFlagAgeDays", staleFlagAgeDays));
        }

        if (staleFlagStaleInEnvironmentsType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staleFlagStaleInEnvironmentsType", staleFlagStaleInEnvironmentsType));
        }

        if (ignoredEnvironmentIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ignoredEnvironmentIds", ignoredEnvironmentIds));
        }

        if (ignoredTagIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ignoredTagIds", ignoredTagIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStaleflagsValidateBeforeCall(UUID productId, StaleFlagReminderScope scope, Integer staleFlagAgeDays, StaleFlagStaleInEnvironmentsType staleFlagStaleInEnvironmentsType, List<UUID> ignoredEnvironmentIds, List<Long> ignoredTagIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getStaleflags(Async)");
        }

        return getStaleflagsCall(productId, scope, staleFlagAgeDays, staleFlagStaleInEnvironmentsType, ignoredEnvironmentIds, ignoredTagIds, _callback);

    }

    /**
     * List Zombie (stale) flags for Product
     * This endpoint returns the list of Zombie (stale) flags for a given Product  and the result can be optionally filtered by various parameters.
     * @param productId The identifier of the Product. (required)
     * @param scope The scope of the report. (optional)
     * @param staleFlagAgeDays The inactivity in days after a feature flag should be considered stale. (optional)
     * @param staleFlagStaleInEnvironmentsType Consider a feature flag as stale if the feature flag is stale in all/any of the environments. (optional)
     * @param ignoredEnvironmentIds Ignore environment identifiers from the report. (optional)
     * @param ignoredTagIds Ignore feature flags from the report based on their tag identifiers. (optional)
     * @return StaleFlagProductModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     </table>
     */
    public StaleFlagProductModel getStaleflags(UUID productId, StaleFlagReminderScope scope, Integer staleFlagAgeDays, StaleFlagStaleInEnvironmentsType staleFlagStaleInEnvironmentsType, List<UUID> ignoredEnvironmentIds, List<Long> ignoredTagIds) throws ApiException {
        ApiResponse<StaleFlagProductModel> localVarResp = getStaleflagsWithHttpInfo(productId, scope, staleFlagAgeDays, staleFlagStaleInEnvironmentsType, ignoredEnvironmentIds, ignoredTagIds);
        return localVarResp.getData();
    }

    /**
     * List Zombie (stale) flags for Product
     * This endpoint returns the list of Zombie (stale) flags for a given Product  and the result can be optionally filtered by various parameters.
     * @param productId The identifier of the Product. (required)
     * @param scope The scope of the report. (optional)
     * @param staleFlagAgeDays The inactivity in days after a feature flag should be considered stale. (optional)
     * @param staleFlagStaleInEnvironmentsType Consider a feature flag as stale if the feature flag is stale in all/any of the environments. (optional)
     * @param ignoredEnvironmentIds Ignore environment identifiers from the report. (optional)
     * @param ignoredTagIds Ignore feature flags from the report based on their tag identifiers. (optional)
     * @return ApiResponse&lt;StaleFlagProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StaleFlagProductModel> getStaleflagsWithHttpInfo(UUID productId, StaleFlagReminderScope scope, Integer staleFlagAgeDays, StaleFlagStaleInEnvironmentsType staleFlagStaleInEnvironmentsType, List<UUID> ignoredEnvironmentIds, List<Long> ignoredTagIds) throws ApiException {
        okhttp3.Call localVarCall = getStaleflagsValidateBeforeCall(productId, scope, staleFlagAgeDays, staleFlagStaleInEnvironmentsType, ignoredEnvironmentIds, ignoredTagIds, null);
        Type localVarReturnType = new TypeToken<StaleFlagProductModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Zombie (stale) flags for Product (asynchronously)
     * This endpoint returns the list of Zombie (stale) flags for a given Product  and the result can be optionally filtered by various parameters.
     * @param productId The identifier of the Product. (required)
     * @param scope The scope of the report. (optional)
     * @param staleFlagAgeDays The inactivity in days after a feature flag should be considered stale. (optional)
     * @param staleFlagStaleInEnvironmentsType Consider a feature flag as stale if the feature flag is stale in all/any of the environments. (optional)
     * @param ignoredEnvironmentIds Ignore environment identifiers from the report. (optional)
     * @param ignoredTagIds Ignore feature flags from the report based on their tag identifiers. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStaleflagsAsync(UUID productId, StaleFlagReminderScope scope, Integer staleFlagAgeDays, StaleFlagStaleInEnvironmentsType staleFlagStaleInEnvironmentsType, List<UUID> ignoredEnvironmentIds, List<Long> ignoredTagIds, final ApiCallback<StaleFlagProductModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStaleflagsValidateBeforeCall(productId, scope, staleFlagAgeDays, staleFlagStaleInEnvironmentsType, ignoredEnvironmentIds, ignoredTagIds, _callback);
        Type localVarReturnType = new TypeToken<StaleFlagProductModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
