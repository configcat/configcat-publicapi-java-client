/*
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.configcat.publicapi.java.client.api;


import com.configcat.publicapi.java.client.ApiCallback;
import com.configcat.publicapi.java.client.ApiClient;
import com.configcat.publicapi.java.client.ApiException;
import com.configcat.publicapi.java.client.ApiResponse;
import com.configcat.publicapi.java.client.Configuration;
import com.configcat.publicapi.java.client.Pair;
import com.configcat.publicapi.java.client.model.CreateProductRequest;
import com.configcat.publicapi.java.client.model.PreferencesModel;
import com.configcat.publicapi.java.client.model.ProductModel;
import com.configcat.publicapi.java.client.model.UpdatePreferencesRequest;
import com.configcat.publicapi.java.client.model.UpdateProductRequest;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProduct
     *
     * @param organizationId The identifier of the Organization. (required)
     * @param createProductRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> When the creation was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createProductCall(
            UUID organizationId,
            CreateProductRequest createProductRequest,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProductRequest;

        // create path and map variables
        String localVarPath =
                "/v1/organizations/{organizationId}/products"
                        .replace(
                                "{" + "organizationId" + "}",
                                localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/*+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"Basic"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductValidateBeforeCall(
            UUID organizationId,
            CreateProductRequest createProductRequest,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'organizationId' when calling"
                            + " createProduct(Async)");
        }

        // verify the required parameter 'createProductRequest' is set
        if (createProductRequest == null) {
            throw new ApiException(
                    "Missing the required parameter 'createProductRequest' when calling"
                            + " createProduct(Async)");
        }

        return createProductCall(organizationId, createProductRequest, _callback);
    }

    /**
     * Create Product This endpoint creates a new Product in a specified Organization identified by
     * the &#x60;organizationId&#x60; parameter, which can be obtained from the [List
     * Organizations](#operation/get-organizations) endpoint.
     *
     * @param organizationId The identifier of the Organization. (required)
     * @param createProductRequest (required)
     * @return ProductModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> When the creation was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public ProductModel createProduct(
            UUID organizationId, CreateProductRequest createProductRequest) throws ApiException {
        ApiResponse<ProductModel> localVarResp =
                createProductWithHttpInfo(organizationId, createProductRequest);
        return localVarResp.getData();
    }

    /**
     * Create Product This endpoint creates a new Product in a specified Organization identified by
     * the &#x60;organizationId&#x60; parameter, which can be obtained from the [List
     * Organizations](#operation/get-organizations) endpoint.
     *
     * @param organizationId The identifier of the Organization. (required)
     * @param createProductRequest (required)
     * @return ApiResponse&lt;ProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> When the creation was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ProductModel> createProductWithHttpInfo(
            UUID organizationId, CreateProductRequest createProductRequest) throws ApiException {
        okhttp3.Call localVarCall =
                createProductValidateBeforeCall(organizationId, createProductRequest, null);
        Type localVarReturnType = new TypeToken<ProductModel>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Product (asynchronously) This endpoint creates a new Product in a specified
     * Organization identified by the &#x60;organizationId&#x60; parameter, which can be obtained
     * from the [List Organizations](#operation/get-organizations) endpoint.
     *
     * @param organizationId The identifier of the Organization. (required)
     * @param createProductRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> When the creation was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createProductAsync(
            UUID organizationId,
            CreateProductRequest createProductRequest,
            final ApiCallback<ProductModel> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createProductValidateBeforeCall(organizationId, createProductRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductModel>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProduct
     *
     * @param productId The identifier of the Product. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> When the delete was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteProductCall(UUID productId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/v1/products/{productId}"
                        .replace(
                                "{" + "productId" + "}",
                                localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"Basic"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductValidateBeforeCall(
            UUID productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException(
                    "Missing the required parameter 'productId' when calling deleteProduct(Async)");
        }

        return deleteProductCall(productId, _callback);
    }

    /**
     * Delete Product This endpoint removes a Product identified by the &#x60;productId&#x60;
     * parameter.
     *
     * @param productId The identifier of the Product. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> When the delete was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public void deleteProduct(UUID productId) throws ApiException {
        deleteProductWithHttpInfo(productId);
    }

    /**
     * Delete Product This endpoint removes a Product identified by the &#x60;productId&#x60;
     * parameter.
     *
     * @param productId The identifier of the Product. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> When the delete was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> deleteProductWithHttpInfo(UUID productId) throws ApiException {
        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Product (asynchronously) This endpoint removes a Product identified by the
     * &#x60;productId&#x60; parameter.
     *
     * @param productId The identifier of the Product. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> When the delete was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteProductAsync(UUID productId, final ApiCallback<Void> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProduct
     *
     * @param productId The identifier of the Product. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When everything is ok, the product data is returned. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getProductCall(UUID productId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/v1/products/{productId}"
                        .replace(
                                "{" + "productId" + "}",
                                localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"Basic"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductValidateBeforeCall(UUID productId, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException(
                    "Missing the required parameter 'productId' when calling getProduct(Async)");
        }

        return getProductCall(productId, _callback);
    }

    /**
     * Get Product This endpoint returns the metadata of a Product identified by the
     * &#x60;productId&#x60;.
     *
     * @param productId The identifier of the Product. (required)
     * @return ProductModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When everything is ok, the product data is returned. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public ProductModel getProduct(UUID productId) throws ApiException {
        ApiResponse<ProductModel> localVarResp = getProductWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * Get Product This endpoint returns the metadata of a Product identified by the
     * &#x60;productId&#x60;.
     *
     * @param productId The identifier of the Product. (required)
     * @return ApiResponse&lt;ProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When everything is ok, the product data is returned. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ProductModel> getProductWithHttpInfo(UUID productId) throws ApiException {
        okhttp3.Call localVarCall = getProductValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<ProductModel>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product (asynchronously) This endpoint returns the metadata of a Product identified by
     * the &#x60;productId&#x60;.
     *
     * @param productId The identifier of the Product. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When everything is ok, the product data is returned. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getProductAsync(UUID productId, final ApiCallback<ProductModel> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getProductValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<ProductModel>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductPreferences
     *
     * @param productId The identifier of the Product. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When everything is ok, the product preferences data is returned. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getProductPreferencesCall(UUID productId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/v1/products/{productId}/preferences"
                        .replace(
                                "{" + "productId" + "}",
                                localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"Basic"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductPreferencesValidateBeforeCall(
            UUID productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException(
                    "Missing the required parameter 'productId' when calling"
                            + " getProductPreferences(Async)");
        }

        return getProductPreferencesCall(productId, _callback);
    }

    /**
     * Get Product Preferences This endpoint returns the preferences of a Product identified by the
     * &#x60;productId&#x60;.
     *
     * @param productId The identifier of the Product. (required)
     * @return PreferencesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When everything is ok, the product preferences data is returned. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public PreferencesModel getProductPreferences(UUID productId) throws ApiException {
        ApiResponse<PreferencesModel> localVarResp = getProductPreferencesWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * Get Product Preferences This endpoint returns the preferences of a Product identified by the
     * &#x60;productId&#x60;.
     *
     * @param productId The identifier of the Product. (required)
     * @return ApiResponse&lt;PreferencesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When everything is ok, the product preferences data is returned. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<PreferencesModel> getProductPreferencesWithHttpInfo(UUID productId)
            throws ApiException {
        okhttp3.Call localVarCall = getProductPreferencesValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<PreferencesModel>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product Preferences (asynchronously) This endpoint returns the preferences of a Product
     * identified by the &#x60;productId&#x60;.
     *
     * @param productId The identifier of the Product. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When everything is ok, the product preferences data is returned. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getProductPreferencesAsync(
            UUID productId, final ApiCallback<PreferencesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductPreferencesValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<PreferencesModel>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProducts
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getProductsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"Basic"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsValidateBeforeCall(final ApiCallback _callback)
            throws ApiException {
        return getProductsCall(_callback);
    }

    /**
     * List Products This endpoint returns the list of the Products that belongs to the user.
     *
     * @return List&lt;ProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public List<ProductModel> getProducts() throws ApiException {
        ApiResponse<List<ProductModel>> localVarResp = getProductsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Products This endpoint returns the list of the Products that belongs to the user.
     *
     * @return ApiResponse&lt;List&lt;ProductModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<ProductModel>> getProductsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProductsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ProductModel>>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Products (asynchronously) This endpoint returns the list of the Products that belongs to
     * the user.
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getProductsAsync(final ApiCallback<List<ProductModel>> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getProductsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ProductModel>>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProduct
     *
     * @param productId The identifier of the Product. (required)
     * @param updateProductRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateProductCall(
            UUID productId, UpdateProductRequest updateProductRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProductRequest;

        // create path and map variables
        String localVarPath =
                "/v1/products/{productId}"
                        .replace(
                                "{" + "productId" + "}",
                                localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/*+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"Basic"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductValidateBeforeCall(
            UUID productId, UpdateProductRequest updateProductRequest, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException(
                    "Missing the required parameter 'productId' when calling updateProduct(Async)");
        }

        // verify the required parameter 'updateProductRequest' is set
        if (updateProductRequest == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateProductRequest' when calling"
                            + " updateProduct(Async)");
        }

        return updateProductCall(productId, updateProductRequest, _callback);
    }

    /**
     * Update Product This endpoint updates a Product identified by the &#x60;productId&#x60;
     * parameter.
     *
     * @param productId The identifier of the Product. (required)
     * @param updateProductRequest (required)
     * @return ProductModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public ProductModel updateProduct(UUID productId, UpdateProductRequest updateProductRequest)
            throws ApiException {
        ApiResponse<ProductModel> localVarResp =
                updateProductWithHttpInfo(productId, updateProductRequest);
        return localVarResp.getData();
    }

    /**
     * Update Product This endpoint updates a Product identified by the &#x60;productId&#x60;
     * parameter.
     *
     * @param productId The identifier of the Product. (required)
     * @param updateProductRequest (required)
     * @return ApiResponse&lt;ProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ProductModel> updateProductWithHttpInfo(
            UUID productId, UpdateProductRequest updateProductRequest) throws ApiException {
        okhttp3.Call localVarCall =
                updateProductValidateBeforeCall(productId, updateProductRequest, null);
        Type localVarReturnType = new TypeToken<ProductModel>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Product (asynchronously) This endpoint updates a Product identified by the
     * &#x60;productId&#x60; parameter.
     *
     * @param productId The identifier of the Product. (required)
     * @param updateProductRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateProductAsync(
            UUID productId,
            UpdateProductRequest updateProductRequest,
            final ApiCallback<ProductModel> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateProductValidateBeforeCall(productId, updateProductRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductModel>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductPreferences
     *
     * @param productId The identifier of the Product. (required)
     * @param updatePreferencesRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When the update was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateProductPreferencesCall(
            UUID productId,
            UpdatePreferencesRequest updatePreferencesRequest,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePreferencesRequest;

        // create path and map variables
        String localVarPath =
                "/v1/products/{productId}/preferences"
                        .replace(
                                "{" + "productId" + "}",
                                localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/*+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"Basic"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductPreferencesValidateBeforeCall(
            UUID productId,
            UpdatePreferencesRequest updatePreferencesRequest,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException(
                    "Missing the required parameter 'productId' when calling"
                            + " updateProductPreferences(Async)");
        }

        // verify the required parameter 'updatePreferencesRequest' is set
        if (updatePreferencesRequest == null) {
            throw new ApiException(
                    "Missing the required parameter 'updatePreferencesRequest' when calling"
                            + " updateProductPreferences(Async)");
        }

        return updateProductPreferencesCall(productId, updatePreferencesRequest, _callback);
    }

    /**
     * Update Product Preferences This endpoint updates the preferences of a Product identified by
     * the &#x60;productId&#x60; parameter.
     *
     * @param productId The identifier of the Product. (required)
     * @param updatePreferencesRequest (required)
     * @return PreferencesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When the update was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public PreferencesModel updateProductPreferences(
            UUID productId, UpdatePreferencesRequest updatePreferencesRequest) throws ApiException {
        ApiResponse<PreferencesModel> localVarResp =
                updateProductPreferencesWithHttpInfo(productId, updatePreferencesRequest);
        return localVarResp.getData();
    }

    /**
     * Update Product Preferences This endpoint updates the preferences of a Product identified by
     * the &#x60;productId&#x60; parameter.
     *
     * @param productId The identifier of the Product. (required)
     * @param updatePreferencesRequest (required)
     * @return ApiResponse&lt;PreferencesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When the update was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<PreferencesModel> updateProductPreferencesWithHttpInfo(
            UUID productId, UpdatePreferencesRequest updatePreferencesRequest) throws ApiException {
        okhttp3.Call localVarCall =
                updateProductPreferencesValidateBeforeCall(
                        productId, updatePreferencesRequest, null);
        Type localVarReturnType = new TypeToken<PreferencesModel>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Product Preferences (asynchronously) This endpoint updates the preferences of a
     * Product identified by the &#x60;productId&#x60; parameter.
     *
     * @param productId The identifier of the Product. (required)
     * @param updatePreferencesRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> When the update was successful. </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests. In case of the request rate exceeds the rate limits. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateProductPreferencesAsync(
            UUID productId,
            UpdatePreferencesRequest updatePreferencesRequest,
            final ApiCallback<PreferencesModel> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateProductPreferencesValidateBeforeCall(
                        productId, updatePreferencesRequest, _callback);
        Type localVarReturnType = new TypeToken<PreferencesModel>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
