/*
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.configcat.publicapi.java.client.model;

import java.util.Objects;
import com.configcat.publicapi.java.client.model.IntegrationLinkModel;
import com.configcat.publicapi.java.client.model.RolloutPercentageItemModel;
import com.configcat.publicapi.java.client.model.RolloutRuleModel;
import com.configcat.publicapi.java.client.model.SettingDataModel;
import com.configcat.publicapi.java.client.model.SettingTagModel;
import com.configcat.publicapi.java.client.model.SettingValueType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.configcat.publicapi.java.client.JSON;

/**
 * ConfigSettingValueModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-10T21:25:35.532049258Z[Etc/UTC]", comments = "Generator version: 7.7.0")
public class ConfigSettingValueModel {
  public static final String SERIALIZED_NAME_SETTING = "setting";
  @SerializedName(SERIALIZED_NAME_SETTING)
  private SettingDataModel setting;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_LAST_UPDATER_USER_EMAIL = "lastUpdaterUserEmail";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATER_USER_EMAIL)
  private String lastUpdaterUserEmail;

  public static final String SERIALIZED_NAME_LAST_UPDATER_USER_FULL_NAME = "lastUpdaterUserFullName";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATER_USER_FULL_NAME)
  private String lastUpdaterUserFullName;

  public static final String SERIALIZED_NAME_INTEGRATION_LINKS = "integrationLinks";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_LINKS)
  private List<IntegrationLinkModel> integrationLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_SETTING_TAGS = "settingTags";
  @SerializedName(SERIALIZED_NAME_SETTING_TAGS)
  private List<SettingTagModel> settingTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROLLOUT_RULES = "rolloutRules";
  @SerializedName(SERIALIZED_NAME_ROLLOUT_RULES)
  private List<RolloutRuleModel> rolloutRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROLLOUT_PERCENTAGE_ITEMS = "rolloutPercentageItems";
  @SerializedName(SERIALIZED_NAME_ROLLOUT_PERCENTAGE_ITEMS)
  private List<RolloutPercentageItemModel> rolloutPercentageItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private SettingValueType value;

  public ConfigSettingValueModel() {
  }

  public ConfigSettingValueModel setting(SettingDataModel setting) {
    this.setting = setting;
    return this;
  }

  /**
   * Get setting
   * @return setting
   */
  @javax.annotation.Nonnull
  public SettingDataModel getSetting() {
    return setting;
  }

  public void setSetting(SettingDataModel setting) {
    this.setting = setting;
  }


  public ConfigSettingValueModel updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The last updated date and time when the Feature Flag or Setting.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public ConfigSettingValueModel lastUpdaterUserEmail(String lastUpdaterUserEmail) {
    this.lastUpdaterUserEmail = lastUpdaterUserEmail;
    return this;
  }

  /**
   * The email of the user who last updated the Feature Flag or Setting.
   * @return lastUpdaterUserEmail
   */
  @javax.annotation.Nullable
  public String getLastUpdaterUserEmail() {
    return lastUpdaterUserEmail;
  }

  public void setLastUpdaterUserEmail(String lastUpdaterUserEmail) {
    this.lastUpdaterUserEmail = lastUpdaterUserEmail;
  }


  public ConfigSettingValueModel lastUpdaterUserFullName(String lastUpdaterUserFullName) {
    this.lastUpdaterUserFullName = lastUpdaterUserFullName;
    return this;
  }

  /**
   * The name of the user who last updated the Feature Flag or Setting.
   * @return lastUpdaterUserFullName
   */
  @javax.annotation.Nullable
  public String getLastUpdaterUserFullName() {
    return lastUpdaterUserFullName;
  }

  public void setLastUpdaterUserFullName(String lastUpdaterUserFullName) {
    this.lastUpdaterUserFullName = lastUpdaterUserFullName;
  }


  public ConfigSettingValueModel integrationLinks(List<IntegrationLinkModel> integrationLinks) {
    this.integrationLinks = integrationLinks;
    return this;
  }

  public ConfigSettingValueModel addIntegrationLinksItem(IntegrationLinkModel integrationLinksItem) {
    if (this.integrationLinks == null) {
      this.integrationLinks = new ArrayList<>();
    }
    this.integrationLinks.add(integrationLinksItem);
    return this;
  }

  /**
   * The integration links attached to the Feature Flag or Setting.
   * @return integrationLinks
   */
  @javax.annotation.Nonnull
  public List<IntegrationLinkModel> getIntegrationLinks() {
    return integrationLinks;
  }

  public void setIntegrationLinks(List<IntegrationLinkModel> integrationLinks) {
    this.integrationLinks = integrationLinks;
  }


  public ConfigSettingValueModel settingTags(List<SettingTagModel> settingTags) {
    this.settingTags = settingTags;
    return this;
  }

  public ConfigSettingValueModel addSettingTagsItem(SettingTagModel settingTagsItem) {
    if (this.settingTags == null) {
      this.settingTags = new ArrayList<>();
    }
    this.settingTags.add(settingTagsItem);
    return this;
  }

  /**
   * The tags attached to the Feature Flag or Setting.
   * @return settingTags
   */
  @javax.annotation.Nonnull
  public List<SettingTagModel> getSettingTags() {
    return settingTags;
  }

  public void setSettingTags(List<SettingTagModel> settingTags) {
    this.settingTags = settingTags;
  }


  public ConfigSettingValueModel rolloutRules(List<RolloutRuleModel> rolloutRules) {
    this.rolloutRules = rolloutRules;
    return this;
  }

  public ConfigSettingValueModel addRolloutRulesItem(RolloutRuleModel rolloutRulesItem) {
    if (this.rolloutRules == null) {
      this.rolloutRules = new ArrayList<>();
    }
    this.rolloutRules.add(rolloutRulesItem);
    return this;
  }

  /**
   * The targeting rule collection.
   * @return rolloutRules
   */
  @javax.annotation.Nonnull
  public List<RolloutRuleModel> getRolloutRules() {
    return rolloutRules;
  }

  public void setRolloutRules(List<RolloutRuleModel> rolloutRules) {
    this.rolloutRules = rolloutRules;
  }


  public ConfigSettingValueModel rolloutPercentageItems(List<RolloutPercentageItemModel> rolloutPercentageItems) {
    this.rolloutPercentageItems = rolloutPercentageItems;
    return this;
  }

  public ConfigSettingValueModel addRolloutPercentageItemsItem(RolloutPercentageItemModel rolloutPercentageItemsItem) {
    if (this.rolloutPercentageItems == null) {
      this.rolloutPercentageItems = new ArrayList<>();
    }
    this.rolloutPercentageItems.add(rolloutPercentageItemsItem);
    return this;
  }

  /**
   * The percentage rule collection.
   * @return rolloutPercentageItems
   */
  @javax.annotation.Nonnull
  public List<RolloutPercentageItemModel> getRolloutPercentageItems() {
    return rolloutPercentageItems;
  }

  public void setRolloutPercentageItems(List<RolloutPercentageItemModel> rolloutPercentageItems) {
    this.rolloutPercentageItems = rolloutPercentageItems;
  }


  public ConfigSettingValueModel value(SettingValueType value) {
    this.value = value;
    return this;
  }

  /**
   * The value to serve. It must respect the setting type. In some generated clients for strictly typed languages you may use double/float properties to handle integer values.
   * @return value
   */
  @javax.annotation.Nonnull
  public SettingValueType getValue() {
    return value;
  }

  public void setValue(SettingValueType value) {
    this.value = value;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConfigSettingValueModel instance itself
   */
  public ConfigSettingValueModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigSettingValueModel configSettingValueModel = (ConfigSettingValueModel) o;
    return Objects.equals(this.setting, configSettingValueModel.setting) &&
        Objects.equals(this.updatedAt, configSettingValueModel.updatedAt) &&
        Objects.equals(this.lastUpdaterUserEmail, configSettingValueModel.lastUpdaterUserEmail) &&
        Objects.equals(this.lastUpdaterUserFullName, configSettingValueModel.lastUpdaterUserFullName) &&
        Objects.equals(this.integrationLinks, configSettingValueModel.integrationLinks) &&
        Objects.equals(this.settingTags, configSettingValueModel.settingTags) &&
        Objects.equals(this.rolloutRules, configSettingValueModel.rolloutRules) &&
        Objects.equals(this.rolloutPercentageItems, configSettingValueModel.rolloutPercentageItems) &&
        Objects.equals(this.value, configSettingValueModel.value)&&
        Objects.equals(this.additionalProperties, configSettingValueModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(setting, updatedAt, lastUpdaterUserEmail, lastUpdaterUserFullName, integrationLinks, settingTags, rolloutRules, rolloutPercentageItems, value, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigSettingValueModel {\n");
    sb.append("    setting: ").append(toIndentedString(setting)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    lastUpdaterUserEmail: ").append(toIndentedString(lastUpdaterUserEmail)).append("\n");
    sb.append("    lastUpdaterUserFullName: ").append(toIndentedString(lastUpdaterUserFullName)).append("\n");
    sb.append("    integrationLinks: ").append(toIndentedString(integrationLinks)).append("\n");
    sb.append("    settingTags: ").append(toIndentedString(settingTags)).append("\n");
    sb.append("    rolloutRules: ").append(toIndentedString(rolloutRules)).append("\n");
    sb.append("    rolloutPercentageItems: ").append(toIndentedString(rolloutPercentageItems)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("setting");
    openapiFields.add("updatedAt");
    openapiFields.add("lastUpdaterUserEmail");
    openapiFields.add("lastUpdaterUserFullName");
    openapiFields.add("integrationLinks");
    openapiFields.add("settingTags");
    openapiFields.add("rolloutRules");
    openapiFields.add("rolloutPercentageItems");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("setting");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("lastUpdaterUserEmail");
    openapiRequiredFields.add("lastUpdaterUserFullName");
    openapiRequiredFields.add("integrationLinks");
    openapiRequiredFields.add("settingTags");
    openapiRequiredFields.add("rolloutRules");
    openapiRequiredFields.add("rolloutPercentageItems");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigSettingValueModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigSettingValueModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigSettingValueModel is not found in the empty JSON string", ConfigSettingValueModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigSettingValueModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `setting`
      SettingDataModel.validateJsonElement(jsonObj.get("setting"));
      if ((jsonObj.get("lastUpdaterUserEmail") != null && !jsonObj.get("lastUpdaterUserEmail").isJsonNull()) && !jsonObj.get("lastUpdaterUserEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdaterUserEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdaterUserEmail").toString()));
      }
      if ((jsonObj.get("lastUpdaterUserFullName") != null && !jsonObj.get("lastUpdaterUserFullName").isJsonNull()) && !jsonObj.get("lastUpdaterUserFullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdaterUserFullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdaterUserFullName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("integrationLinks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationLinks` to be an array in the JSON string but got `%s`", jsonObj.get("integrationLinks").toString()));
      }

      JsonArray jsonArrayintegrationLinks = jsonObj.getAsJsonArray("integrationLinks");
      // validate the required field `integrationLinks` (array)
      for (int i = 0; i < jsonArrayintegrationLinks.size(); i++) {
        IntegrationLinkModel.validateJsonElement(jsonArrayintegrationLinks.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("settingTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `settingTags` to be an array in the JSON string but got `%s`", jsonObj.get("settingTags").toString()));
      }

      JsonArray jsonArraysettingTags = jsonObj.getAsJsonArray("settingTags");
      // validate the required field `settingTags` (array)
      for (int i = 0; i < jsonArraysettingTags.size(); i++) {
        SettingTagModel.validateJsonElement(jsonArraysettingTags.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("rolloutRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolloutRules` to be an array in the JSON string but got `%s`", jsonObj.get("rolloutRules").toString()));
      }

      JsonArray jsonArrayrolloutRules = jsonObj.getAsJsonArray("rolloutRules");
      // validate the required field `rolloutRules` (array)
      for (int i = 0; i < jsonArrayrolloutRules.size(); i++) {
        RolloutRuleModel.validateJsonElement(jsonArrayrolloutRules.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("rolloutPercentageItems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolloutPercentageItems` to be an array in the JSON string but got `%s`", jsonObj.get("rolloutPercentageItems").toString()));
      }

      JsonArray jsonArrayrolloutPercentageItems = jsonObj.getAsJsonArray("rolloutPercentageItems");
      // validate the required field `rolloutPercentageItems` (array)
      for (int i = 0; i < jsonArrayrolloutPercentageItems.size(); i++) {
        RolloutPercentageItemModel.validateJsonElement(jsonArrayrolloutPercentageItems.get(i));
      };
      // validate the required field `value`
      SettingValueType.validateJsonElement(jsonObj.get("value"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigSettingValueModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigSettingValueModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigSettingValueModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigSettingValueModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigSettingValueModel>() {
           @Override
           public void write(JsonWriter out, ConfigSettingValueModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigSettingValueModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ConfigSettingValueModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigSettingValueModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigSettingValueModel
   * @throws IOException if the JSON string is invalid with respect to ConfigSettingValueModel
   */
  public static ConfigSettingValueModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigSettingValueModel.class);
  }

  /**
   * Convert an instance of ConfigSettingValueModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

