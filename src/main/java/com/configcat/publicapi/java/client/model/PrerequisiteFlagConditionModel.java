/*
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.configcat.publicapi.java.client.model;


import com.configcat.publicapi.java.client.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Describes a condition that is based on a prerequisite flag. */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-10-09T12:38:06.739118192Z[Etc/UTC]",
        comments = "Generator version: 7.7.0")
public class PrerequisiteFlagConditionModel {
    public static final String SERIALIZED_NAME_PREREQUISITE_SETTING_ID = "prerequisiteSettingId";

    @SerializedName(SERIALIZED_NAME_PREREQUISITE_SETTING_ID)
    private Integer prerequisiteSettingId;

    public static final String SERIALIZED_NAME_COMPARATOR = "comparator";

    @SerializedName(SERIALIZED_NAME_COMPARATOR)
    private PrerequisiteComparator comparator;

    public static final String SERIALIZED_NAME_PREREQUISITE_COMPARISON_VALUE =
            "prerequisiteComparisonValue";

    @SerializedName(SERIALIZED_NAME_PREREQUISITE_COMPARISON_VALUE)
    private ValueModel prerequisiteComparisonValue;

    public PrerequisiteFlagConditionModel() {}

    public PrerequisiteFlagConditionModel prerequisiteSettingId(Integer prerequisiteSettingId) {
        this.prerequisiteSettingId = prerequisiteSettingId;
        return this;
    }

    /**
     * The prerequisite flag&#39;s identifier.
     *
     * @return prerequisiteSettingId
     */
    @javax.annotation.Nonnull
    public Integer getPrerequisiteSettingId() {
        return prerequisiteSettingId;
    }

    public void setPrerequisiteSettingId(Integer prerequisiteSettingId) {
        this.prerequisiteSettingId = prerequisiteSettingId;
    }

    public PrerequisiteFlagConditionModel comparator(PrerequisiteComparator comparator) {
        this.comparator = comparator;
        return this;
    }

    /**
     * Get comparator
     *
     * @return comparator
     */
    @javax.annotation.Nonnull
    public PrerequisiteComparator getComparator() {
        return comparator;
    }

    public void setComparator(PrerequisiteComparator comparator) {
        this.comparator = comparator;
    }

    public PrerequisiteFlagConditionModel prerequisiteComparisonValue(
            ValueModel prerequisiteComparisonValue) {
        this.prerequisiteComparisonValue = prerequisiteComparisonValue;
        return this;
    }

    /**
     * Get prerequisiteComparisonValue
     *
     * @return prerequisiteComparisonValue
     */
    @javax.annotation.Nonnull
    public ValueModel getPrerequisiteComparisonValue() {
        return prerequisiteComparisonValue;
    }

    public void setPrerequisiteComparisonValue(ValueModel prerequisiteComparisonValue) {
        this.prerequisiteComparisonValue = prerequisiteComparisonValue;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PrerequisiteFlagConditionModel prerequisiteFlagConditionModel =
                (PrerequisiteFlagConditionModel) o;
        return Objects.equals(
                        this.prerequisiteSettingId,
                        prerequisiteFlagConditionModel.prerequisiteSettingId)
                && Objects.equals(this.comparator, prerequisiteFlagConditionModel.comparator)
                && Objects.equals(
                        this.prerequisiteComparisonValue,
                        prerequisiteFlagConditionModel.prerequisiteComparisonValue);
    }

    @Override
    public int hashCode() {
        return Objects.hash(prerequisiteSettingId, comparator, prerequisiteComparisonValue);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PrerequisiteFlagConditionModel {\n");
        sb.append("    prerequisiteSettingId: ")
                .append(toIndentedString(prerequisiteSettingId))
                .append("\n");
        sb.append("    comparator: ").append(toIndentedString(comparator)).append("\n");
        sb.append("    prerequisiteComparisonValue: ")
                .append(toIndentedString(prerequisiteComparisonValue))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("prerequisiteSettingId");
        openapiFields.add("comparator");
        openapiFields.add("prerequisiteComparisonValue");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("prerequisiteSettingId");
        openapiRequiredFields.add("comparator");
        openapiRequiredFields.add("prerequisiteComparisonValue");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     PrerequisiteFlagConditionModel
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!PrerequisiteFlagConditionModel.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PrerequisiteFlagConditionModel is not"
                                        + " found in the empty JSON string",
                                PrerequisiteFlagConditionModel.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!PrerequisiteFlagConditionModel.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PrerequisiteFlagConditionModel` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : PrerequisiteFlagConditionModel.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the required field `comparator`
        PrerequisiteComparator.validateJsonElement(jsonObj.get("comparator"));
        // validate the required field `prerequisiteComparisonValue`
        ValueModel.validateJsonElement(jsonObj.get("prerequisiteComparisonValue"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PrerequisiteFlagConditionModel.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PrerequisiteFlagConditionModel' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PrerequisiteFlagConditionModel> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(PrerequisiteFlagConditionModel.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PrerequisiteFlagConditionModel>() {
                        @Override
                        public void write(JsonWriter out, PrerequisiteFlagConditionModel value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PrerequisiteFlagConditionModel read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PrerequisiteFlagConditionModel given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PrerequisiteFlagConditionModel
     * @throws IOException if the JSON string is invalid with respect to
     *     PrerequisiteFlagConditionModel
     */
    public static PrerequisiteFlagConditionModel fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PrerequisiteFlagConditionModel.class);
    }

    /**
     * Convert an instance of PrerequisiteFlagConditionModel to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
